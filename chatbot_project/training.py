# -*- coding: utf-8 -*-
"""training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RPLuwT4zX2nDtohQ-Yy-7IQz5o6b9Kfb
"""

import pandas as pd

df_raw = pd.read_csv('ÖZNEL-NESNEL VERİ KÜMESİ.csv')

# Sol blok
left  = df_raw[['Cümle', 'Tür']].rename(columns={'Cümle':'sentence', 'Tür':'label'})

# Sağ blok (bazı sütun adlarında boşluk var!)
right = df_raw[['Cümle ', 'Tür.1']].rename(columns={'Cümle ':'sentence', 'Tür.1':'label'})

# İki bloğu alt alta birleştir
df = pd.concat([left, right], ignore_index=True)

# Boş satır/NaN ve baş‑son boşlukları temizle
df = df.dropna(subset=['sentence','label'])
df['sentence'] = df['sentence'].str.strip()
df['label']    = df['label'].str.strip().str.capitalize()   # "öZNeL " -> "Öznel"

# Son kontrol
print(df.head(), '\n\nSınıf dağılımı:\n', df['label'].value_counts())

y = df['label'].map({'Öznel':1, 'Nesnel':0})

import re, nltk, joblib
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix

nltk.download('stopwords')
stop_tr = set(stopwords.words('turkish'))

def preprocess(t):
    t = re.sub(r'[^a-zA-ZçğıöşüÇĞİÖŞÜ\s]', ' ', t.lower())
    tokens = [w for w in t.split() if w not in stop_tr]
    return ' '.join(tokens)

df['clean'] = df['sentence'].apply(preprocess)

tfidf = TfidfVectorizer(max_features=5000, ngram_range=(1,2))
X     = tfidf.fit_transform(df['clean'])

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.15, stratify=y, random_state=42
)

model = LogisticRegression(max_iter=2000, class_weight='balanced')
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred, target_names=['Nesnel','Öznel']))
print(confusion_matrix(y_test, y_pred))

joblib.dump(model, 'logreg_subjectivity.joblib')
joblib.dump(tfidf,  'tfidf_vectorizer.joblib')

def classify_sentence(sent):
    vec = tfidf.transform([preprocess(sent)])
    return 'Öznel' if model.predict(vec)[0]==1 else 'Nesnel'

print(classify_sentence("Bence bu film harika"))         # Öznel
print(classify_sentence("Su 100°C'de kaynar"))           # Nesnel

import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import learning_curve
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, f1_score

# --- 1) Öğrenme Eğrisi ----------------------------------------------------
train_sizes, train_scores, val_scores = learning_curve(
    model,                    # eğittiğiniz LogisticRegression
    X, y,                     # TF‑IDF matrisi ve etiketler
    cv=5,
    scoring='f1',
    train_sizes=np.linspace(0.1, 1.0, 8),
    n_jobs=-1,
    shuffle=True,
    random_state=42
)

train_mean = train_scores.mean(axis=1)
val_mean   = val_scores.mean(axis=1)

plt.figure(figsize=(10,4))

plt.subplot(1,2,1)
plt.plot(train_sizes, train_mean, marker='o', label='Eğitim (F1)')
plt.plot(train_sizes, val_mean,   marker='s', label='Doğrulama (F1)')
plt.xlabel('Eğitim örnek sayısı')
plt.ylabel('F1 skoru')
plt.title('Öğrenme Eğrisi')
plt.grid(True)
plt.legend()

# --- 2) Confusion Matrix --------------------------------------------------
y_pred_test = model.predict(X_test)
cm = confusion_matrix(y_test, y_pred_test, labels=[0,1])
disp = ConfusionMatrixDisplay(cm, display_labels=['Nesnel','Öznel'])

plt.subplot(1,2,2)
disp.plot(ax=plt.gca(), colorbar=False)
plt.title('Test Kümesi Confusion Matrix')

plt.tight_layout()
plt.show()

